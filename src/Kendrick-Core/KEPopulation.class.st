"
A KEPopulation is a population splitted in several compartments in which the disease is spreading.

Instance Variables
	compartments:		<Dictionary>
	individuals:		<OrderedCollection>
	diedIndList:		<OrderedCollection>
	attributes:	<Dictionary>
	relations:	<OrderedCollection>

compartments
	- A dictionary of compartments in the population, each of them has a name generated by attributes and the set of equivalence relations of this population

individuals
	- A collection of individuals (instances of KEIndividual class)
	
attributes
         - A list of attributes of each individual in the population

relations
	- A set of equivalence relationship for partitioning the population in compartments
	



"
Class {
	#name : #KEPopulation,
	#superclass : #KEEntity,
	#instVars : [
		'compartments',
		'initialSize'
	],
	#category : #'Kendrick-Core-MM1'
}

{ #category : #accessing }
KEPopulation class >> size: aNumber [
	|population|
	population := self new.
	population initialSize: aNumber.
	^ population
]

{ #category : #adding }
KEPopulation >> compartments [
"Return a dictionary"
	^ compartments
]

{ #category : #accessing }
KEPopulation >> compartments: aDictionary [
	"Why we should allow user to modify the compartments like that?"

	self compartments ifNil: [ compartments := Dictionary new ]. "This line can be removed, after reset had been remove"

	aDictionary keysAndValuesDo: [ :k :v | compartments at: k put: v ]
]

{ #category : #initialization }
KEPopulation >> initialize [
	compartments := Dictionary new
]

{ #category : #accessing }
KEPopulation >> reset [
	"Should be removed in the future"
	compartments := nil
]

{ #category : #accessing }
KEPopulation >> size [
	compartments ifEmpty:  [ ^ 0 ].
	^ compartments sum
]

{ #category : #'as yet unclassified' }
KEPopulation >> sizeOfACompartment: aCompartmentName [
	^ self compartments at: aCompartmentName ifAbsent: [ ^ self error: 'No compartment name: ', aCompartmentName asString ]
	
	
	
	
]

{ #category : #'as yet unclassified' }
KEPopulation >> sizeOfCompartments: keys [
	|c|
	c := 0.
	self compartments keysAndValuesDo: [ :k :v|
		(k associations includesAll: keys) ifTrue: [ c := c + v ]
	].
	^ c
	
	
	
]

{ #category : #accessing }
KEPopulation >> sizeOfPopulation: array [

	"array describe a subpopulation like {#S. #human. #female}. Returns the cardinality of compartments that verify this property"

	| c |
	c := 0.
	self compartments keysAndValuesDo: [ :k :v | 
		(k values includesAll: array) ifTrue: [ c := c + v ] ].
	^ c
]

'From Pharo6.0 of 13 May 2016 [Latest update: #60528] on 29 July 2018 at 11:37:05.837485 pm'!KEGraph subclass: #KEContactNetwork	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kendrick-Spatial-Core'!!KEContactNetwork commentStamp: 'BuiThiMaiAnh 7/8/2016 16:30' prior: 0!KEContactNetwork represents a contact patterns between all subpopulations/individuals of an epidemiological model!!KEContactNetwork methodsFor: 'adding' stamp: 'BuiThiMaiAnh 7/9/2016 00:26'!addNode: aNodeLabel	nodes add: (KEContactNode new label: aNodeLabel)! !!KEContactNetwork methodsFor: 'accessing' stamp: 'BuiThiMaiAnh 7/11/2016 11:05'!value: aModel	^ self! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'nguyentienthanh 7/29/2018 22:30'!averageContact	self nodes count = 0 ifTrue: [ ^0 ]. 	^((self edges count)/(self nodes count)).! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'nguyentienthanh 7/29/2018 22:59'!averageContact: arguments	"{model. attrbute1->status}"	|model numerator denominator|	self nodes count = 0 ifTrue: [ ^0 ]. 	arguments count <= 1 ifTrue: [ ^0 ].	model := arguments first.	numerator := 0.	self nodesDo: [:node| numerator  := numerator  + node contactsOf: arguments.  ].	denominator := model atCompartment: (arguments at: 2).	denominator = 0 ifTrue: [ ^0 ].	^(numerator / denominator).! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'BuiThiMaiAnh 7/9/2016 11:56'!updateNodeOf: ind	"This function is just called in the case of network of individuals"	|currentNode newLabel|	currentNode := (self nodes at: ind id).	newLabel :=  { #status->(ind nextStatus at: #status). #id->(ind id) }.	currentNode adjacentNodes keysAndValuesDo: [ :k :v| 		|idx|		idx := (Dictionary newFrom: k) at: #id.		(self nodes at: idx) adjacentNodes removeKey: currentNode label ifAbsent: [ ].		(self nodes at: idx) addAdjacentNode: (newLabel->v)		].	currentNode label: newLabel	! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'BuiThiMaiAnh 7/9/2016 11:56'!createNodeOf: ind	"This function is just called in the case of network of individuals"	(ind id > self nodes size) ifTrue: [ 		self addNode: { #status->(ind currentStatus at: #status). #id->(ind id) }	].	topology appendNode: ({#status->(ind currentStatus at: #status). #id->(ind id) })->(ind id)! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'BuiThiMaiAnh 7/9/2016 11:56'!releaseNodeOf: ind	"This function is just called in the case of network of individuals"	|adjacentNodeLabels currentNode|	topology activeNodes remove: ind id.	currentNode := (self nodes at: ind id).	adjacentNodeLabels := currentNode adjacentNodes keys.	adjacentNodeLabels do: [ :k| 		(self nodes at: ((Dictionary newFrom: k) at: #id)) adjacentNodes removeKey: currentNode label.		currentNode adjacentNodes removeKey: k		].! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'BuiThiMaiAnh 7/9/2016 11:57'!allContacts	^ self nodes collect: [ :e| e label ]! !!KEContactNetwork methodsFor: 'as yet unclassified' stamp: 'BuiThiMaiAnh 7/11/2016 10:24'!contactsOf: arguments	|model node attributes args|	model := arguments first.	attributes := Dictionary newFrom: (arguments copyFrom: 2 to: arguments size).	node := attributes at: #node.	attributes removeKey: #node.	args := OrderedCollection new.	args add: model.	args addAll: attributes associations.	^ (self atNode: node) contactsOf: args! !